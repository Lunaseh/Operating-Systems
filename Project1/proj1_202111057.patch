diff --git a/proc.c b/proc.c
index 806b1b1..5115bee 100644
--- a/proc.c
+++ b/proc.c
@@ -88,6 +88,8 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->cpu_affinity = LITTLE_CORE;  // 기본적으로 Little Core에 할당 (added)
+  p->runtime = 0; // (added)
 
   release(&ptable.lock);
 
@@ -194,6 +196,7 @@ fork(void)
     kfree(np->kstack);
     np->kstack = 0;
     np->state = UNUSED;
+    
     return -1;
   }
   np->sz = curproc->sz;
@@ -209,7 +212,7 @@ fork(void)
   np->cwd = idup(curproc->cwd);
 
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-
+  np->cpu_affinity = LITTLE_CORE;  // New starts on Little-default (added)
   pid = np->pid;
 
   acquire(&ptable.lock);
@@ -221,6 +224,23 @@ fork(void)
   return pid;
 }
 
+void 
+migrate_process(struct proc *p) { // (added)
+    if (holding(&ptable.lock)) { // (added)
+        if (p->cpu_affinity == LITTLE_CORE) { // (added)
+            p->cpu_affinity = BIG_CORE; // (added)
+        }
+    } else { // (added)
+        acquire(&ptable.lock); // (added)
+        if (p->cpu_affinity == LITTLE_CORE) { // (added)
+            p->cpu_affinity = BIG_CORE; // (added)
+        }
+        release(&ptable.lock); // (added)
+    }
+}
+
+
+
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
 // until its parent calls wait() to find out it exited.
@@ -333,8 +353,9 @@ scheduler(void)
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
+      if(p->state != RUNNABLE){
         continue;
+      }
 
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
@@ -346,10 +367,29 @@ scheduler(void)
       swtch(&(c->scheduler), p->context);
       switchkvm();
 
+      p->runtime += 10; //Schduling cycle 당 10ms 가정 (added)
+
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
     }
+
+     int runnable_count = 0; //(added)
+        struct proc *heavy_proc = 0; //(added)
+        for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){//(added)
+            if(p->state == RUNNABLE && p->cpu_affinity == LITTLE_CORE) {//(added)
+                runnable_count++;//(added)
+                if(!heavy_proc || p->runtime > heavy_proc->runtime) {//(added)
+                    heavy_proc = p;//(added)
+                }
+            }
+        }
+
+        // Migrate if over threshold
+        if(runnable_count > 10 && heavy_proc) { // (added)
+            migrate_process(heavy_proc); // (added)
+        }
+
     release(&ptable.lock);
 
   }
@@ -531,4 +571,4 @@ procdump(void)
     }
     cprintf("\n");
   }
-}
+}
\ No newline at end of file
diff --git a/proc.h b/proc.h
index 1647114..4ce640d 100644
--- a/proc.h
+++ b/proc.h
@@ -1,3 +1,6 @@
+#define LITTLE_CORE 0 // (added)
+#define BIG_CORE 1 // (added)
+
 // Per-CPU state
 struct cpu {
   uchar apicid;                // Local APIC ID
@@ -49,6 +52,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int cpu_affinity; // 프로세스가 실행될 CPU (0: Little, 1: Big) (added)
+  uint runtime; // (added)
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/trap.c b/trap.c
index 41c66eb..c16ae3b 100644
--- a/trap.c
+++ b/trap.c
@@ -55,6 +55,10 @@ trap(struct trapframe *tf)
       release(&tickslock);
     }
     lapiceoi();
+    if(myproc() && myproc()->state == RUNNING) // (added)
+            myproc()->runtime += 10;  // Update runtime (added)
+        if(myproc() && myproc()->state == RUNNING && tf->trapno == T_IRQ0+IRQ_TIMER) // (added)
+            yield();  // Give up CPU for load balancing (added)
     break;
   case T_IRQ0 + IRQ_IDE:
     ideintr();
